
So here's the idea: switch the list to a tuple of ("Above", searchAboveFn).
You'll need to change every place where the second function is accessed and called.
Then, use a list comprehension to take care of setting the local "dirs" - keep in mind that it will now be backwards
Then, whenever two values are switched in the settings, identify and switch those values in the list.



Your roadmap:





- settings for the different algorithms that you were planning to add
- deal with line wrap and geometry in the settings windows
- let's be honest - if you can give it a cross-platform look, that would really be a plus
- give it a readme and clean up print statements and debugging code - the readme should have a tutorial of sorts explaining the basic features. Make txt files untracked and see if that removes them from your history.


- ability to draw lines in generate mode

So here's the design:

When you first enter generate mode, nothing will be on the maze.
When you hover over the start square, a transparentish circle will show up, like the normal maze nodes.
The moment you click on it, that puts you in "drawing a line mode". 
The help text will change to "Click and drag to draw a line. Try solving the maze!"
In this mode, you can hover over the end of the line you just drew 

You know, this is kind of a useless feature. It doesn't really add anything. Let's table it for now.
At the end you can decide if it's really necessary. If so, these guidelines are usable. If not, you'll need to go through your code and remove all preliminary support for it, like those if statements.

and then it will be ready to be made a public repo.



Here were the problems you came across that slowed down the development process and hurt your overall perception of development:
- You didn't accept that there was inherent circular dependency in your structure, and that essentially it isn't really worth fixing. Code is messy by default, especially with a UI application like this, since one click may need features from all over your codebase. You can't be a neat freak; don't worry so much about that.
- You know I think partially, this is such an entertaining project that you're getting easily distracted by playing around with the animation. You can't let that happen.
- you're also lacking the ability to set goals. You're reaching a point where you're tired, then just giving up instead of thinking critically about what you've done and whether or not you have a good game plan for what you need to do.
- whenever you're unsure about what to do, sit back and think for at least a minute before giving up. You'll come up with a simple and fun plan.








Once done, make buttons different colors to make ui more interesting
and easier to read - make backgrounds of each frame different colors
- take a hot minute to read about styles
- (how to center justify text in buttons?)
- buttons - add config option cursor='hand2'
- when animation is running, make backgrounds for fully disabled frames
the default color, but keep frames that still have available controls
keep their new color
- I think that red button was supposed to be a record button. Also,
I'm not actually digging the black borders around the images
- assign a color to each of solve and generate modes, and have the
buttons be those colors, and in each mode have the entire window
change to be like that color - like for green, have the background be
a darker green while the sunken frames are a lighter green, or something
like that


Maybe have a tutorial to introduce the features; this is probably
what anybody looking at this to evaluate me would see first









bind enter key to starting the animation

really should make a* animation cleaner & more similar
to other animations (like with black dots and such); will make huge difference
in how professional it looks - blue instead of red, red instead of green
- just have first circle be the same color as the line below it

Have the colors used to draw traversalLog lines change in a gradient
based on how recently it was found, so the deeper you search
the more of a certain color you get!



fully remove redrawDelay if it ends up staying just at 1 to make code cleaner


Once finished everything, try changing cell indexing scheme to (row, col) and
see if it improves performance





Would there be a way to have the margins of the maze change
if the aspect ratio of each cell does not fall within some
set boundary? Or have them always be squares?
aspect ratio thing is good because if they were always squares,
could end up with some weird spacing, but people like squares
this would not be that much of a problem to add - just
would have to revamp logic in drawMaze - would be cool!
- find max(dims[0], dims[1]) and have the margins be based on which is
the greatest; then determine the dimensions of the cell based on that,
and put other margins based on that


boundary updating when rows and cols are updated by user - would be
a lot easier if boundaries were stored like (row, col)


have another animation speed slider in the animation settings,
but this one shows the time in seconds of the delay
between steps (put under the description for default mode,
have it disable when another value is chosen for the mode)


when clicking and dragging to make boundaries in solve mode,
have default setting be adding or removing based on which
square the user started in - as it is now, it's always adding
when dragging

more on dragging: have a way to circumvent the extra
vertical lines a user might get when they try to
click and drag to create a long horizontal boundary





TO PREVENT LAGGING:
- maybe at the end, measure timings of certain operations,
make some of these changes, and see if they make things better
(like learn how to use python time module)

have different boundary list for left bounds and right bounds? Might
help with lagging? Or try some different data structure instead of set?
- make sure to change what the boundary thing is initialized to
- when the Clear Maze button is pressed

- change redrawDelay based on the size of the boundaries set?
for lagging purposes


ONLY DRAW what needs to be drawn, like just the boundaries

Maybe saving boundaries as row and col pairs would be better, since
they have to be converted back and forth each time a new boundary is added
or drawn onto the canvas


have the colors of the maze be customizable
have a way to save an image of the maze to the filesystem